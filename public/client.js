// Generated by CoffeeScript 1.3.3
(function() {
  var RouletteApp, SocketProxy, socket;

  RouletteApp = function() {
    var apiKey, disconnectPartner, ele, init, mySession, next, partnerSession, subscribe, wait;
    apiKey = 16664242;
    mySession = void 0;
    partnerSession = void 0;
    ele = {};
    TB.setLogLevel(TB.DEBUG);
    init = function(sessionId, token) {
      var sessionConnectedHandler, streamCreatedHandler;
      sessionConnectedHandler = function(event) {
        var publisher;
        console.log("Connected, press allow.");
        return publisher = mySession.publish("publisher");
      };
      streamCreatedHandler = function(event) {
        var stream;
        stream = event.streams[0];
        if (mySession.connection.connectionId === stream.connection.connectionId) {
          return SocketProxy.findPartner(mySession.sessionId);
        }
      };
      ele.nextButton = document.getElementById("nextButton");
      console.log("Connecting...");
      mySession = TB.initSession(sessionId);
      mySession.addEventListener("sessionConnected", sessionConnectedHandler);
      mySession.addEventListener("streamCreated", streamCreatedHandler);
      return mySession.connect(apiKey, token);
    };
    next = function() {
      if (partnerSession.connected) {
        return SocketProxy.disconnectPartners();
      } else {
        return SocketProxy.findPartner();
      }
    };
    disconnectPartner = function() {
      return partnerSession.disconnect();
    };
    subscribe = function(sessionId, token) {
      var sessionConnectedHandler, sessionDisconnectedHandler, streamDestroyedHandler;
      sessionConnectedHandler = function(event) {
        return partnerSession.subscribe(event.streams[0], "subscriber");
      };
      sessionDisconnectedHandler = function(event) {
        partnerSession.removeEventListener("sessionConnected", sessionConnectedHandler);
        partnerSession.removeEventListener("sessionDisconnected", sessionDisconnectedHandler);
        partnerSession.removeEventListener("streamDestroyed", streamDestroyedHandler);
        SocketProxy.findPartner(mySession.sessionId);
        return partnerSession = null;
      };
      streamDestroyedHandler = function(event) {
        return partnerSession.disconnect();
      };
      console.log("Have fun !!!!");
      partnerSession = TB.initSession(sessionId);
      partnerSession.addEventListener("sessionConnected", sessionConnectedHandler);
      partnerSession.addEventListener("sessionDisconnected", sessionDisconnectedHandler);
      partnerSession.addEventListener("streamDestroyed", streamDestroyedHandler);
      return partnerSession.connect(apiKey, token);
    };
    wait = function() {
      return console.log("Nobody to talk to :(.  When someone comes, you'll be the first to know :).");
    };
    return {
      init: init,
      next: next,
      subscribe: subscribe,
      disconnectPartner: disconnectPartner,
      wait: wait
    };
  };

  RouletteApp = RouletteApp();

  socket = io.connect('/');

  socket.on("initial", function(data) {
    console.log(data);
    return RouletteApp.init(data.sessionId, data.token);
  });

  socket.on("subscribe", function(data) {
    return RouletteApp.subscribe(data.sessionId, data.token);
  });

  socket.on("disconnectPartner", function(data) {
    return RouletteApp.disconnectPartner();
  });

  socket.on("empty", function(data) {
    return RouletteApp.wait();
  });

  SocketProxy = {
    findPartner: function(mySessionId) {
      return socket.emit("next", {
        sessionId: mySessionId
      });
    },
    disconnectPartners: function() {
      return socket.emit("disconnectPartners");
    }
  };

}).call(this);
